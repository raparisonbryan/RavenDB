import { RequestExecutor } from "../Http/RequestExecutor";
import { DocumentStoreBase } from "./DocumentStoreBase";
import { IDocumentStore } from "./IDocumentStore";
import { MaintenanceOperationExecutor } from "./Operations/MaintenanceOperationExecutor";
import { OperationExecutor } from "./Operations/OperationExecutor";
import { IDocumentSession } from "./Session/IDocumentSession";
import { SessionOptions } from "./Session/SessionOptions";
import { IAuthOptions } from "../Auth/AuthOptions";
import { BulkInsertOperation, BulkInsertOptions } from "./BulkInsertOperation";
import { IDatabaseChanges } from "./Changes/IDatabaseChanges";
import { DatabaseChanges } from "./Changes/DatabaseChanges";
import { DatabaseSmuggler } from "./Smuggler/DatabaseSmuggler";
import { DatabaseChangesOptions } from "./Changes/DatabaseChangesOptions";
import { IDisposable } from "../Types/Contracts";
import { MultiDatabaseHiLoIdGenerator } from "./Identity/MultiDatabaseHiLoIdGenerator";
export declare class DocumentStore extends DocumentStoreBase {
    private _log;
    private readonly _databaseChanges;
    private _requestExecutors;
    private _multiDbHiLo;
    private _maintenanceOperationExecutor;
    private _operationExecutor;
    private _smuggler;
    private _identifier;
    private _aggressiveCachingUsed;
    constructor(url: string, database: string);
    constructor(urls: string[], database: string);
    constructor(url: string, database: string, authOptions: IAuthOptions);
    constructor(urls: string[], database: string, authOptions: IAuthOptions);
    private _getDatabaseChangesCacheKey;
    get identifier(): string;
    set identifier(identifier: string);
    get hiLoIdGenerator(): MultiDatabaseHiLoIdGenerator;
    dispose(): void;
    openSession(): IDocumentSession;
    openSession(database: string): IDocumentSession;
    openSession(sessionOpts: SessionOptions): IDocumentSession;
    getRequestExecutor(database?: string): RequestExecutor;
    requestTimeout(timeoutInMs: number): IDisposable;
    requestTimeout(timeoutInMs: number, database: string): IDisposable;
    initialize(): IDocumentStore;
    protected _assertValidConfiguration(): void;
    changes(): IDatabaseChanges;
    changes(database: string): IDatabaseChanges;
    changes(database: string, nodeTag: string): IDatabaseChanges;
    protected _createDatabaseChanges(node: DatabaseChangesOptions): DatabaseChanges;
    getLastDatabaseChangesStateException(): Error;
    getLastDatabaseChangesStateException(database: string): Error;
    getLastDatabaseChangesStateException(database: string, nodeTag: string): Error;
    get maintenance(): MaintenanceOperationExecutor;
    get smuggler(): DatabaseSmuggler;
    get operations(): OperationExecutor;
    bulkInsert(): BulkInsertOperation;
    bulkInsert(database: string): BulkInsertOperation;
    bulkInsert(options: BulkInsertOptions): BulkInsertOperation;
    bulkInsert(database: string, options: BulkInsertOptions): BulkInsertOperation;
}
