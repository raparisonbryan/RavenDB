import { IDisposable } from "../../Types/Contracts";
import { DocumentStore } from "../DocumentStore";
import { SubscriptionCreationOptions } from "./SubscriptionCreationOptions";
import { DocumentType } from "../DocumentAbstractions";
import { SubscriptionWorkerOptions } from "./SubscriptionWorkerOptions";
import { Revision } from "./Revision";
import { SubscriptionState } from "./SubscriptionState";
import { SubscriptionWorker } from "./SubscriptionWorker";
import { SubscriptionUpdateOptions } from "./SubscriptionUpdateOptions";
export declare class DocumentSubscriptions implements IDisposable {
    private readonly _store;
    private readonly _subscriptions;
    constructor(store: DocumentStore);
    create(options: SubscriptionCreationOptions): Promise<string>;
    create(options: SubscriptionCreationOptions, database: string): Promise<string>;
    create(documentType: DocumentType): Promise<string>;
    createForRevisions(options: SubscriptionCreationOptions): Promise<string>;
    createForRevisions(options: SubscriptionCreationOptions, database: string): Promise<string>;
    private _ensureCriteria;
    getSubscriptionWorker<T extends object>(options: SubscriptionWorkerOptions<T>): SubscriptionWorker<T>;
    getSubscriptionWorker<T extends object>(options: SubscriptionWorkerOptions<T>, database: string): SubscriptionWorker<T>;
    getSubscriptionWorker<T extends object>(subscriptionName: string): SubscriptionWorker<T>;
    getSubscriptionWorker<T extends object>(subscriptionName: string, database: string): SubscriptionWorker<T>;
    getSubscriptionWorkerForRevisions<T extends object>(options: SubscriptionWorkerOptions<T>): SubscriptionWorker<Revision<T>>;
    getSubscriptionWorkerForRevisions<T extends object>(options: SubscriptionWorkerOptions<T>, database: string): SubscriptionWorker<Revision<T>>;
    getSubscriptions(start: number, take: number): Promise<SubscriptionState[]>;
    getSubscriptions(start: number, take: number, database: string): Promise<SubscriptionState[]>;
    delete(name: string): Promise<void>;
    delete(name: string, database: string): Promise<void>;
    getSubscriptionState(subscriptionName: string): Promise<SubscriptionState>;
    getSubscriptionState(subscriptionName: string, database: string): Promise<SubscriptionState>;
    dispose(): void;
    dropConnection(name: string): Promise<void>;
    dropConnection(name: string, database: string): Promise<void>;
    enable(name: string): any;
    enable(name: string, database: string): any;
    disable(name: string): any;
    disable(name: string, database: string): any;
    update(options: SubscriptionUpdateOptions): Promise<string>;
    update(options: SubscriptionUpdateOptions, database: string): Promise<string>;
}
