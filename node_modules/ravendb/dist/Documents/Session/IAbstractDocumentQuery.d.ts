import { SearchOperator } from "../Queries/SearchOperator";
import { OrderingType } from "./OrderingType";
import { MethodCall } from "./MethodCall";
import { WhereParams } from "./WhereParams";
import { DynamicSpatialField } from "../Queries/Spatial/DynamicSpatialField";
import { SpatialCriteria } from "../Queries/Spatial/SpatialCriteria";
import { GroupBy } from "../Queries/GroupBy";
import { DocumentType } from "../DocumentAbstractions";
import { MoreLikeThisScope } from "../Queries/MoreLikeThis/MoreLikeThisScope";
import { SuggestionBase } from "../Queries/Suggestions/SuggestionBase";
import { HighlightingParameters } from "../Queries/Highlighting/HighlightingParameters";
import { ValueCallback } from "../../Types/Callbacks";
import { Highlightings } from "../Queries/Highlighting/Hightlightings";
import { IncludeBuilderBase } from "./Loaders/IncludeBuilderBase";
import { DocumentConventions } from "../Conventions/DocumentConventions";
export interface IAbstractDocumentQuery<T> {
    indexName: string;
    collectionName: string;
    conventions: DocumentConventions;
    isDynamicMapReduce(): boolean;
    _waitForNonStaleResults(waitTimeout: number): void;
    getProjectionFields(): string[];
    _randomOrdering(): void;
    _randomOrdering(seed: string): void;
    _include(path: string): void;
    _include(includes: IncludeBuilderBase): void;
    _take(count: number): void;
    _skip(count: number): void;
    _whereEquals(fieldName: string, value: any): void;
    _whereEquals(fieldName: string, value: any, exact: boolean): void;
    _whereEquals(fieldName: string, method: MethodCall): void;
    _whereEquals(fieldName: string, method: MethodCall, exact: boolean): void;
    _whereEquals(whereParams: WhereParams): void;
    _whereNotEquals(fieldName: string, value: any): void;
    _whereNotEquals(fieldName: string, value: any, exact: boolean): void;
    _whereNotEquals(fieldName: string, method: MethodCall): void;
    _whereNotEquals(fieldName: string, method: MethodCall, exact: boolean): void;
    _whereNotEquals(whereParams: WhereParams): void;
    _openSubclause(): void;
    _closeSubclause(): void;
    _negateNext(): void;
    _whereIn(fieldName: string, values: any[]): void;
    _whereIn(fieldName: string, values: any[], exact: boolean): void;
    _whereStartsWith(fieldName: string, value: any): void;
    _whereStartsWith(fieldName: string, value: any, exact: boolean): void;
    _whereEndsWith(fieldName: string, value: any): void;
    _whereEndsWith(fieldName: string, value: any, exact: boolean): void;
    _whereBetween(fieldName: string, start: any, end: any): void;
    _whereBetween(fieldName: string, start: any, end: any, exact: boolean): void;
    _whereGreaterThan(fieldName: string, value: any): void;
    _whereGreaterThan(fieldName: string, value: any, exact: boolean): void;
    _whereGreaterThanOrEqual(fieldName: string, value: any): void;
    _whereGreaterThanOrEqual(fieldName: string, value: any, exact: boolean): void;
    _whereLessThan(fieldName: string, value: any): void;
    _whereLessThan(fieldName: string, value: any, exact: boolean): void;
    _whereLessThanOrEqual(fieldName: string, value: any): void;
    _whereLessThanOrEqual(fieldName: string, value: any, exact: boolean): void;
    _whereExists(fieldName: string): void;
    _whereRegex(fieldName: string, pattern: string): void;
    _andAlso(): void;
    _orElse(): void;
    _boost(boost: number): void;
    _fuzzy(fuzzy: number): void;
    _proximity(proximity: number): void;
    _orderBy(field: string): void;
    _orderBy(field: string, ordering: OrderingType): void;
    _orderBy(field: string, options: {
        sorterName: string;
    }): void;
    _orderByDescending(field: string): void;
    _orderByDescending(field: string, ordering: OrderingType): void;
    _orderByDescending(field: string, options: {
        sorterName: string;
    }): void;
    _orderByScore(): void;
    _orderByScoreDescending(): void;
    _highlight(parameters: HighlightingParameters, highlightingsCallback: ValueCallback<Highlightings>): void;
    _search(fieldName: string, searchTerms: string): void;
    _search(fieldName: string, searchTerms: string, operator: SearchOperator): void;
    toString(): string;
    _intersect(): void;
    addRootType(clazz: DocumentType): void;
    _distinct(): void;
    _containsAny(fieldName: string, values: any[]): void;
    _containsAll(fieldName: string, values: any[]): void;
    _groupBy(fieldName: string, ...fieldNames: string[]): void;
    _groupBy(field: GroupBy, ...fields: GroupBy[]): void;
    _groupByKey(fieldName: string): void;
    _groupByKey(fieldName: string, projectedName: string): void;
    _groupBySum(fieldName: string): void;
    _groupBySum(fieldName: string, projectedName: string): void;
    _groupByCount(): void;
    _groupByCount(projectedName: string): void;
    _whereTrue(): void;
    _spatial(field: DynamicSpatialField, criteria: SpatialCriteria): void;
    _spatial(fieldName: string, criteria: SpatialCriteria): void;
    _orderByDistance(field: DynamicSpatialField, latitude: number, longitude: number): void;
    _orderByDistance(fieldName: string, latitude: number, longitude: number): void;
    _orderByDistance(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;
    _orderByDistance(field: DynamicSpatialField, shapeWkt: string): void;
    _orderByDistance(fieldName: string, shapeWkt: string): void;
    _orderByDistance(fieldName: string, shapeWkt: string, roundFactor: number): void;
    _orderByDistanceDescending(field: DynamicSpatialField, latitude: number, longitude: number): void;
    _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number): void;
    _orderByDistanceDescending(fieldName: string, latitude: number, longitude: number, roundFactor: number): void;
    _orderByDistanceDescending(field: DynamicSpatialField, shapeWkt: string): void;
    _orderByDistanceDescending(fieldName: string, shapeWkt: string): void;
    _orderByDistanceDescending(fieldName: string, shapeWkt: string, roundFactor: number): void;
    _moreLikeThis(): MoreLikeThisScope;
    addAliasToIncludesTokens(fromAlias: string): string;
    _suggestUsing(suggestion: SuggestionBase): any;
    parameterPrefix: string;
    iterator(): Promise<IterableIterator<T>>;
}
