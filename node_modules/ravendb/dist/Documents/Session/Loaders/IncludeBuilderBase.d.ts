import { DocumentConventions } from "../../Conventions/DocumentConventions";
import { CountersByDocId } from "../CounterInternalTypes";
import { AbstractTimeSeriesRange } from "../../Operations/TimeSeries/AbstractTimeSeriesRange";
import { TimeSeriesRangeType } from "../../Operations/TimeSeries/TimeSeriesRangeType";
import { TimeValue } from "../../../Primitives/TimeValue";
export declare class IncludeBuilderBase {
    private _nextParameterId;
    private readonly _conventions;
    documentsToInclude: Set<string>;
    alias: string;
    countersToIncludeBySourcePath: CountersByDocId;
    timeSeriesToIncludeBySourceAlias: Map<string, AbstractTimeSeriesRange[]>;
    compareExchangeValuesToInclude: Set<string>;
    revisionsToIncludeByChangeVector: Set<string>;
    revisionsToIncludeByDateTime: Date;
    includeTimeSeriesTags: boolean;
    includeTimeSeriesDocument: boolean;
    get timeSeriesToInclude(): AbstractTimeSeriesRange[];
    get countersToInclude(): Set<string>;
    get isAllCounters(): boolean;
    constructor(conventions: DocumentConventions);
    protected _includeCompareExchangeValue(path: string): void;
    protected _includeCounterWithAlias(path: string, name: string): void;
    protected _includeCounterWithAlias(path: string, names: string[]): void;
    protected _includeDocuments(path: string): void;
    protected _includeRevisionsBefore(revisionsToIncludeByDateTime: Date): void;
    protected _includeRevisionsByChangeVectors(path: string): void;
    protected _includeCounter(path: string, name: string): void;
    protected _includeCounters(path: string, names: string[]): void;
    protected _includeAllCountersWithAlias(path: string): void;
    protected _includeAllCounters(sourcePath: string): void;
    protected _assertNotAllAndAddNewEntryIfNeeded(path: string): void;
    protected _withAlias(): void;
    protected _includeTimeSeriesFromTo(alias: string, name: string, from: Date, to: Date): void;
    protected _includeTimeSeriesByRangeTypeAndTime(alias: string, name: string, type: TimeSeriesRangeType, time: TimeValue): void;
    private static _assertValidType;
    protected _includeTimeSeriesByRangeTypeAndCount(alias: string, name: string, type: TimeSeriesRangeType, count: number): void;
    private static _assertValidTypeAndCount;
    protected _includeArrayOfTimeSeriesByRangeTypeAndTime(names: string[], type: TimeSeriesRangeType, time: TimeValue): void;
    protected _includeArrayOfTimeSeriesByRangeTypeAndCount(names: string[], type: TimeSeriesRangeType, count: number): void;
    private _assertValid;
}
